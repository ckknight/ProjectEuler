using System;
using System.Collections;
using System.Collections.Generic;

namespace Ckknight.ProjectEuler.Collections
{
    /// <summary>
    /// Represents an object which generates an infinitely-long Fibonacci sequence.
    /// </summary>
    /// <typeparam name="T">The type of object generated by the FibonacciSequence.</typeparam>
    public sealed class FibonacciSequence<T> : IEnumerable<T>
    {
        /// <summary>
        /// Initialize a new FibonacciSequence.
        /// </summary>
        /// <param name="start">The starting object to yield.</param>
        /// <param name="otherStart">The second object to yield.</param>
        /// <param name="adder">The function that will add two objects together.</param>
        public FibonacciSequence(T start, T otherStart, Func<T, T, T> adder)
        {
            if (adder == null)
            {
                throw new ArgumentNullException("adder");
            }
            _start = start;
            _otherStart = otherStart;
            _adder = adder;
        }

        private readonly T _start;
        private readonly T _otherStart;
        private readonly Func<T, T, T> _adder;

        #region IEnumerable<T> Members

        /// <summary>
        /// Return an enumerator that will iterate over an infinitely-long Fibonacci sequence.
        /// </summary>
        /// <returns>The enumerator.</returns>
        public IEnumerator<T> GetEnumerator()
        {
            T a = _start;
            T b = _otherStart;

            while (true)
            {
                yield return a;
                T tmp = a;
                a = b;
                b = _adder(tmp, b);
            }
        }

        #endregion

        #region IEnumerable Members

        /// <summary>
        /// Return an enumerator that will iterate over an infinitely-long Fibonacci sequence.
        /// </summary>
        /// <returns>The enumerator.</returns>
        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }

        #endregion
    }
}
